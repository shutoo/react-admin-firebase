{"version":3,"file":"index.modern.mjs","sources":["../src/misc/arrayHelpers.ts","../src/misc/objectFlatten.ts","../src/misc/logger/logger-base.ts","../src/misc/logger/logger.ts","../src/misc/logger/firestore-logger.ts","../src/misc/dispatcher.ts","../src/misc/translate-from-firestore.ts","../src/misc/document-parser.ts","../src/misc/internal.models.ts","../src/misc/pathHelper.ts","../src/misc/translate-to-firestore.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/misc/firebase-models.ts","../src/providers/database/ResourceManager.ts","../src/providers/database/FireClient.ts","../src/misc/metadata-parser.ts","../src/providers/lazy-loading/queryCursors.ts","../src/providers/lazy-loading/paramsToQuery.ts","../src/providers/lazy-loading/FirebaseLazyLoadingClient.ts","../src/providers/DataProvider.ts","../src/misc/status-code-translator.ts","../src/providers/queries/GetList.ts","../src/providers/queries/GetOne.ts","../src/providers/queries/GetMany.ts","../src/providers/queries/GetManyReference.ts","../src/providers/commands/Update.ts","../src/providers/commands/UpdateMany.ts","../src/providers/commands/Create.ts","../src/providers/commands/Delete.ts","../src/providers/commands/Delete.Soft.ts","../src/providers/commands/DeleteMany.ts","../src/providers/commands/DeleteMany.Soft.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["import { get, isEmpty } from 'lodash';\nimport { getFieldReferences, SearchObj } from './objectFlatten';\n\nexport function sortArray(\n  data: Array<{}>,\n  field: string,\n  dir: 'asc' | 'desc'\n): void {\n  data.sort((a: {}, b: {}) => {\n    const rawA = get(a, field);\n    const rawB = get(b, field);\n    const isAsc = dir === \"asc\";\n\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\n    if (isNumberField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    const isStringField = typeof rawA === 'string' && typeof rawB === 'string';\n    if (isStringField) {\n      const aParsed = rawA.toLowerCase();\n      const bParsed = rawB.toLowerCase();\n      return basicSort(aParsed, bParsed, isAsc);\n    }\n    const isDateField = rawA instanceof Date && rawB instanceof Date;\n    if (isDateField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    return basicSort(!!rawA, !!rawB, isAsc);\n  });\n}\n\nfunction basicSort(aValue: any, bValue: any, isAsc: boolean) {\n  if (aValue > bValue) {\n    return isAsc ? 1 : -1;\n  }\n  if (aValue < bValue) {\n    return isAsc ? -1 : 1;\n  }\n  return 0;\n}\n\nexport function filterArray(\n  data: Array<{}>,\n  searchFields?: { [field: string]: string | number | boolean | null }\n): Array<{}> {\n  if (!searchFields || isEmpty(searchFields)) {\n    return data;\n  }\n  const searchObjs: SearchObj[] = [];\n  Object.keys(searchFields).map((fieldName) => {\n    const fieldValue = searchFields[fieldName];\n    const getSubObjects = getFieldReferences(fieldName, fieldValue);\n    searchObjs.push(...getSubObjects);\n  });\n  const filtered = data.filter((row) =>\n    searchObjs.reduce((acc, cur) => {\n      const res = doesRowMatch(row, cur.searchField, cur.searchValue);\n      return res && acc;\n    }, true as boolean)\n  );\n  return filtered;\n}\n\nexport function doesRowMatch(\n  row: {},\n  searchField: string,\n  searchValue: any\n): boolean {\n  const searchThis = get(row, searchField);\n  const bothAreFalsey = !searchThis && !searchValue;\n  if (bothAreFalsey) {\n    return true;\n  }\n  const nothingToSearch = !searchThis;\n  if (nothingToSearch) {\n    return false;\n  }\n  const isStringSearch = typeof searchValue === 'string';\n  if (isStringSearch) {\n    return searchThis\n      .toString()\n      .toLowerCase()\n      .includes(searchValue.toLowerCase());\n  }\n  const isBooleanOrNumber =\n    typeof searchValue === 'boolean' || typeof searchValue === 'number';\n  if (isBooleanOrNumber) {\n    return searchThis === searchValue;\n  }\n  const isArraySearch = Array.isArray(searchValue);\n  if (isArraySearch) {\n    return searchValue.includes(searchThis);\n  }\n  return false;\n}\n","type SearchValues = {} | number | string | boolean | null ;\ntype SearchValue = SearchValues | SearchValue[];\n\nexport interface SearchObj {\n  searchField: string;\n  searchValue: SearchValue;\n}\nexport function getFieldReferences(\n  fieldName: string,\n  value: {} | SearchValue\n): SearchObj[] {\n  const isFalsy = !value;\n  const isSimple = isFalsy ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean';\n\n  if (isSimple) {\n    return [\n      {\n        searchField: fieldName,\n        searchValue: value as SearchValue,\n      },\n    ];\n  }\n  const tree = {} as Record<string, SearchValue>;\n  tree[fieldName] = value;\n  return objectFlatten(tree);\n}\n\nexport function objectFlatten(tree: {}): SearchObj[] {\n  var leaves: SearchObj[] = [];\n  var recursivelyWalk = function (obj: any, path: string | null) {\n    path = path || \"\";\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const objVal = obj && obj[key];\n        const currentPath = !!path ? path + \".\" + key : key;\n        const isWalkable =\n          typeof objVal === 'object' || objVal instanceof Array;\n        if (isWalkable) {\n          recursivelyWalk(objVal, currentPath);\n        } else {\n          leaves.push({ searchField: currentPath, searchValue: objVal });\n        }\n      }\n    }\n  };\n  recursivelyWalk(tree, null);\n  return leaves;\n}\n","type LogFn = (...args: any) => void;\n\nexport const LogNoOp: LogFn = (...args: any) => null;\n\nexport class LoggerBase {\n  constructor(private title: string, private cacheEnabledKey: string) {}\n\n  private isEnabled() {\n    return !!localStorage.getItem(this.cacheEnabledKey);\n  }\n\n  SetEnabled(isEnabled: boolean) {\n    if (isEnabled) {\n      localStorage.setItem(this.cacheEnabledKey, 'true');\n    } else {\n      localStorage.removeItem(this.cacheEnabledKey);\n    }\n  }\n\n  public get log() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.log.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get warn() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.warn.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get error() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.error.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n}\n","import { LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_ENABLED';\nexport const logger = new LoggerBase('ðŸ”¥raf:', LOGGER_ENABLEDKEY);\n\nexport const log = logger.log;\nexport const logError = logger.error;\nexport const logWarn = logger.warn;\n","import { RAFirebaseOptions } from 'providers/options';\nimport { LogNoOp, LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_FIRESTORE_COSTS_ENABLED';\nconst logger = new LoggerBase('ðŸ’¸firestore-costs:', LOGGER_ENABLEDKEY);\n\nconst KEY_SINGLE = 'firecosts-single-reads';\n\nexport interface IFirestoreLogger {\n  logDocument: (count: number) => Function;\n  SetEnabled: (isEnabled: boolean) => void;\n  ResetCount: (shouldReset: boolean) => void;\n}\n\nexport function MakeFirestoreLogger(\n  options: RAFirebaseOptions\n): IFirestoreLogger {\n  function notEnabled() {\n    return !options?.lazyLoading?.enabled;\n  }\n\n  function incrementRead(incrementBy = 1) {\n    const currentCountRaw = localStorage.getItem(KEY_SINGLE) || '';\n    const currentCount = parseInt(currentCountRaw) || 0;\n    const incremented = currentCount + incrementBy;\n    localStorage.setItem(KEY_SINGLE, incremented + '');\n    return incremented;\n  }\n  function clearCache() {\n    localStorage.removeItem(KEY_SINGLE);\n  }\n  return {\n    SetEnabled(isEnabled: boolean) {\n      logger.SetEnabled(isEnabled);\n    },\n    ResetCount(shouldReset: boolean) {\n      shouldReset && clearCache()\n    },\n    logDocument(docCount: number) {\n      if (notEnabled()) {\n        return LogNoOp;\n      }\n      const count = incrementRead(docCount);\n      const suffix = `+${docCount} (session total=${count} documents read)`;\n      const boundLogFn: (...args: any) => void = logger.log.bind(\n        console,\n        suffix\n      );\n      return boundLogFn;\n    },\n  };\n}\n","import { log } from './logger';\n\nexport type DispatchEvent =\n\t'FILE_UPLOAD_WILL_START' |\n\t'FILE_UPLOAD_PROGRESS' |\n\t'FILE_UPLOAD_PAUSED' |\n\t'FILE_UPLOAD_RUNNING' |\n\t'FILE_UPLOAD_CANCELED' |\n\t'FILE_UPLOAD_COMPLETE' |\n\t'FILE_SAVED';\n\nexport function dispatch(\n\teventName: DispatchEvent,\n\tfileName: string,\n\tdata?: any,\n): void {\n\tconst eventMonitor = document.getElementById('eventMonitor');\n\tif (!eventMonitor) {\n\t\tlog(`eventMonitor not found to dispatch event ${eventName} for ${fileName}`);\n\t\treturn;\n\t}\n\tconst eventData = { fileName, data };\n\tlet event = new CustomEvent(eventName, { detail: eventData });\n\teventMonitor.dispatchEvent(event);\n};","import { set, has } from \"lodash\";\nimport { IFirebaseWrapper } from \"providers/database\";\nimport { REF_INDENTIFIER } from \"./internal.models\";\nimport { logError } from \"./logger\";\nimport { FireStoreDocumentRef } from \"./firebase-models\";\n\nexport interface RefDocFound {\n  fieldPath: string;\n  refDocPath: string;\n}\n\nexport interface FromFirestoreResult {\n  parsedDoc: any;\n  refdocs: RefDocFound[];\n}\n\nexport function translateDocFromFirestore(obj: any) {\n  const isObject = !!obj && typeof obj === \"object\";\n  const result: FromFirestoreResult = {\n    parsedDoc: {},\n    refdocs: [],\n  };\n  if (!isObject) {\n    return result;\n  }\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    obj[key] = recusivelyCheckObjectValue(value, key, result);\n  });\n  result.parsedDoc = obj;\n  return result;\n}\n\nexport function recusivelyCheckObjectValue(\n  input: any,\n  fieldPath: string,\n  result: FromFirestoreResult\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== \"object\";\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === \"function\";\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as any[]).map((value, index) =>\n      recusivelyCheckObjectValue(value, `${fieldPath}.${index}`, result)\n    );\n  }\n  const isDocumentReference = isInputADocReference(input);\n  if (isDocumentReference) {\n    const ref = input as FireStoreDocumentRef;\n    result.refdocs.push({ fieldPath: fieldPath, refDocPath: ref.path });\n    return ref.id;\n  }\n  const isObject = typeof input === \"object\";\n  if (isObject) {\n    Object.keys(input).map((key) => {\n      const value = input[key];\n      input[key] = recusivelyCheckObjectValue(value, key, result);\n    });\n    return input;\n  }\n  return input;\n}\n\nfunction isInputADocReference(input: any): boolean {\n  const isDocumentReference = typeof input.id === \"string\" &&\n    typeof input.firestore === \"object\" &&\n    typeof input.parent === \"object\" &&\n    typeof input.path === \"string\";\n  return isDocumentReference;\n}\n\nexport function applyRefDocs(\n  doc: any,\n  refDocs: RefDocFound[],\n) {\n  refDocs.map((d) => {\n    set(doc, REF_INDENTIFIER + d.fieldPath, d.refDocPath);\n  });\n  return doc;\n}\n\nexport const recursivelyMapStorageUrls = async (\n  fireWrapper: IFirebaseWrapper,\n  fieldValue: any\n): Promise<any> => {\n  const isPrimitive = !fieldValue || typeof fieldValue !== 'object';\n  if (isPrimitive) {\n    return fieldValue\n  }\n  const isFileField = has(fieldValue, 'src');\n  if (isFileField) {\n    try {\n      const src = await fireWrapper\n        .storage()\n        .ref(fieldValue.src)\n        .getDownloadURL();\n      return {\n        ...fieldValue,\n        src,\n      };\n    } catch (error) {\n      logError(`Error when getting download URL`, {\n        error,\n      });\n      return fieldValue;\n    }\n  }\n  const isArray = Array.isArray(fieldValue);\n  if (isArray) {\n    return Promise.all(\n      (fieldValue as any[]).map(async (value, index) => {\n        fieldValue[index] = await recursivelyMapStorageUrls(fireWrapper, value);\n      })\n    );\n  }\n  const isDocumentReference = isInputADocReference(fieldValue);\n  if (isDocumentReference) {\n    return fieldValue;\n  }\n  const isObject = !isArray && typeof fieldValue === \"object\";\n  if (isObject) {\n    return Promise.all(\n      Object.keys(fieldValue).map(async (key) => {\n        const value = fieldValue[key];\n        fieldValue[key] = await recursivelyMapStorageUrls(fireWrapper, value);\n      })\n    );\n  }\n};\n","import { FireStoreQueryDocumentSnapshot, FireStoreDocumentSnapshot } from \"./firebase-models\";\nimport { logWarn } from \"./logger\";\nimport { applyRefDocs, translateDocFromFirestore } from \"./translate-from-firestore\";\nimport * as ra from './react-admin-models';\n\nexport function parseFireStoreDocument<T extends ra.Record>(doc: FireStoreQueryDocumentSnapshot | FireStoreDocumentSnapshot | undefined): T {\n  if (!doc) {\n    logWarn('parseFireStoreDocument: no doc', { doc });\n    return {} as T;\n  }\n  const data = doc.data();\n  const result = translateDocFromFirestore(data);\n  const dataWithRefs = applyRefDocs(result.parsedDoc, result.refdocs);\n  // React Admin requires an id field on every document,\n  // So we can just using the firestore document id\n  return { id: doc.id, ...dataWithRefs } as T;\n}\n","export const REF_INDENTIFIER = \"___REF_FULLPATH_\";\n\nexport interface ParsedRefDoc {\n  ___refpath: string;\n  ___refid: string;\n}\n","import path from \"path-browserify\";\n\nexport function getAbsolutePath(\n  rootRef: undefined | string | (() => string),\n  relativePath: string | null\n): string {\n  if (!rootRef) {\n    return relativePath+'';\n  }\n  if (!relativePath) {\n    throw new Error(\n      \"Resource name must be a string of length greater than 0 characters\"\n    );\n  }\n  const rootRefValue = typeof rootRef === \"string\" ? rootRef : rootRef();\n  const withSlashes = path.join(\"/\", rootRefValue, \"/\", relativePath, \"/\");\n  const slashCount = withSlashes.split(\"/\").length - 1;\n  if (slashCount % 2) {\n    throw new Error(`The rootRef path must point to a \"document\"\n    not a \"collection\"e.g. /collection/document/ or\n    /collection/document/collection/document/`);\n  }\n  return withSlashes.slice(1, -1);\n}\n\nexport function joinPaths(...args: string[]) {\n  return path.join(...args);\n}\n","import { REF_INDENTIFIER } from \"./internal.models\";\n\ninterface ParsedUpload {\n  fieldDotsPath: string;\n  fieldSlashesPath: string;\n  rawFile: File | any;\n}\n\ninterface ParsedDocRef {\n  fieldDotsPath: string;\n  refPath: string;\n}\n\ninterface ParseResult {\n  parsedDoc: any;\n  uploads: ParsedUpload[];\n  refdocs: ParsedDocRef[];\n}\n\nexport function translateDocToFirestore(obj: any): ParseResult {\n  const isObject = !!obj && typeof obj === \"object\";\n  const result: ParseResult = {\n    uploads: [],\n    refdocs: [],\n    parsedDoc: {},\n  };\n  if (!isObject) {\n    return result;\n  }\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    recusivelyParseObjectValue(value, key, result);\n  });\n  result.parsedDoc = obj;\n  return result;\n}\n\nexport function recusivelyParseObjectValue(\n  input: any,\n  fieldPath: string,\n  result: ParseResult\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isRefField =\n    typeof fieldPath === \"string\" && fieldPath.includes(REF_INDENTIFIER);\n  if (isRefField) {\n    const refDocFullPath = input as string;\n    result.refdocs.push({\n      fieldDotsPath: fieldPath,\n      refPath: refDocFullPath,\n    });\n    return;\n  }\n  const isPrimitive = typeof input !== \"object\";\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === \"function\";\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map((value, index) =>\n      recusivelyParseObjectValue(value, `${fieldPath}.${index}`, result)\n    );\n  }\n  const isFileField = !!input && input.hasOwnProperty(\"rawFile\");\n  if (isFileField) {\n    result.uploads.push({\n      fieldDotsPath: fieldPath,\n      fieldSlashesPath: fieldPath.split(\".\").join(\"/\"),\n      rawFile: input.rawFile,\n    });\n    delete input.rawFile;\n    return;\n  }\n  Object.keys(input).map((key) => {\n    const value = input[key];\n    recusivelyParseObjectValue(value, `${fieldPath}.${key}`, result);\n  });\n  return input;\n}\n","import {\n  IFirebaseWrapper,\n} from './IFirebaseWrapper';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\n\nimport { log } from 'misc';\nimport { RAFirebaseOptions } from 'providers/options';\nimport {\n  FireApp,\n  FireAuth,\n  FireAuthUserCredentials,\n  FireStorage,\n  FireStoragePutFileResult,\n  FireStore,\n  FireStoreBatch,\n  FireStoreCollectionRef,\n  FireUploadTaskSnapshot,\n  FireUser\n} from 'misc/firebase-models';\n\nexport class FirebaseWrapper implements IFirebaseWrapper {\n  private firestore: FireStore;\n  private app: FireApp;\n  public options: RAFirebaseOptions;\n\n  constructor(\n    inputOptions: RAFirebaseOptions | undefined,\n    firebaseConfig: {},\n  ) { \n    const optionsSafe = inputOptions || {};\n    this.options = optionsSafe;\n    this.app = (window as any)['_app'] = ObtainFirebaseApp(firebaseConfig, optionsSafe);\n    this.firestore = this.app.firestore();\n  }\n  dbGetCollection(absolutePath: string): FireStoreCollectionRef {\n    return this.firestore.collection(absolutePath);\n  }\n  dbCreateBatch(): FireStoreBatch {\n    return this.firestore.batch();\n  }\n  dbMakeNewId(): string {\n    return this.firestore.collection(\"collections\").doc().id\n  }\n\n  public OnUserLogout(callBack: (u: FireUser | null) => any) {\n    this.app.auth().onAuthStateChanged((user) => {\n      const isLoggedOut = !user;\n      log('FirebaseWrapper.OnUserLogout', { user, isLoggedOut });\n      if (isLoggedOut) {\n        callBack(user);\n      }\n    });\n  }\n  putFile(storagePath: string, rawFile: any): FireStoragePutFileResult {\n    const task = this.app.storage().ref(storagePath).put(rawFile);\n    const taskResult = new Promise<FireUploadTaskSnapshot>(\n      (res, rej) => task.then(res).catch(rej)\n    );\n    const downloadUrl = taskResult.then(t => t.ref.getDownloadURL()).then(url => url as string)\n    return {\n      task,\n      taskResult,\n      downloadUrl,\n    }\n  }\n  async getStorageDownloadUrl(fieldSrc: string): Promise<string> {\n    return this.app.storage().ref(fieldSrc).getDownloadURL();\n  }\n  public serverTimestamp() {\n    // This line doesn't work for some reason, might be firebase sdk.\n    return firebase.firestore.FieldValue.serverTimestamp();\n  }\n  async authSetPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    let persistenceResolved: string;\n    switch (persistenceInput) {\n      case 'local':\n        persistenceResolved = firebase.auth.Auth.Persistence.LOCAL;\n        break;\n      case 'none':\n        persistenceResolved = firebase.auth.Auth.Persistence.NONE;\n        break;\n      case 'session':\n      default:\n        persistenceResolved = firebase.auth.Auth.Persistence.SESSION;\n        break;\n    }\n    log('setPersistence', { persistenceInput, persistenceResolved });\n    return this.app.auth()\n      .setPersistence(persistenceResolved)\n      .catch((error) => console.error(error));\n  }\n  async authSigninEmailPassword(email: string, password: string): Promise<FireAuthUserCredentials> {\n    const user = await this.app.auth().signInWithEmailAndPassword(\n      email,\n      password\n    );\n    return user;\n  }\n  async authSignOut(): Promise<void> {\n    return this.app.auth().signOut();\n  }\n  async authGetUserLoggedIn(): Promise<FireUser> {\n    return new Promise((resolve, reject) => {\n      const auth = this.app.auth();\n      if (auth.currentUser) return resolve(auth.currentUser);\n      const unsubscribe = this.app.auth().onAuthStateChanged((user) => {\n        unsubscribe();\n        if (user) {\n          resolve(user);\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n  public async GetUserLogin(): Promise<FireUser> {\n    return this.authGetUserLoggedIn();\n  }\n\n  /** @deprecated */\n  public auth(): FireAuth {\n    return this.app.auth();\n  }\n  /** @deprecated */\n  public storage(): FireStorage {\n    return this.app.storage();\n  }\n  /** @deprecated */\n  public GetApp(): FireApp {\n    return this.app;\n  }\n  /** @deprecated */\n  public db(): FireStore {\n    return this.firestore;\n  }\n}\n\nfunction ObtainFirebaseApp(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): firebase.app.App {\n  if (options.app) {\n    return options.app;\n  }\n  const isInitialized = !!firebase.apps?.length;\n  if (isInitialized) {\n    return firebase.app();\n  } else {\n    return firebase.initializeApp(firebaseConfig);\n  }\n}\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/storage';\n\nexport type FireUser = firebase.User;\nexport type FireApp = firebase.app.App;\n\nexport type FireStorage = firebase.storage.Storage;\nexport type FireStorageReference = firebase.storage.Reference;\nexport type FireUploadTaskSnapshot = firebase.storage.UploadTaskSnapshot;\nexport type FireUploadTask = firebase.storage.UploadTask;\nexport type FireStoragePutFileResult = {\n  task: FireUploadTask, \n  taskResult: Promise<FireUploadTaskSnapshot>,\n  downloadUrl: Promise<string>,\n}\n\nexport type FireAuth = firebase.auth.Auth;\nexport type FireAuthUserCredentials = firebase.auth.UserCredential;\n\nexport type FireStore = firebase.firestore.Firestore;\nexport type FireStoreBatch = firebase.firestore.WriteBatch;\nexport type FireStoreTimeStamp = firebase.firestore.FieldValue;\nexport type FireStoreDocumentRef = firebase.firestore.DocumentReference;\nexport type FireStoreDocumentSnapshot = firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>;\nexport type FireStoreCollectionRef = firebase.firestore.CollectionReference;\nexport type FireStoreQueryDocumentSnapshot = firebase.firestore.QueryDocumentSnapshot;\nexport type FireStoreQuery = firebase.firestore.Query;\nexport type FireStoreQueryOrder = firebase.firestore.OrderByDirection;\n\nexport const TASK_PAUSED = firebase.storage.TaskState.PAUSED\nexport const TASK_RUNNING = firebase.storage.TaskState.RUNNING\nexport const TASK_CANCELED = firebase.storage.TaskState.CANCELED\n","import { RAFirebaseOptions } from '../options';\nimport { IFirebaseWrapper } from './firebase/IFirebaseWrapper';\nimport {\n  log,\n  getAbsolutePath,\n  messageTypes,\n  logWarn,\n  IFirestoreLogger,\n  parseFireStoreDocument,\n} from '../../misc';\nimport { FireStoreCollectionRef } from 'misc/firebase-models';\n\ntype IResourceItem = {} & { id: string, deleted?: boolean };\nexport interface IResource {\n  path: string;\n  pathAbsolute: string;\n  collection: FireStoreCollectionRef;\n  list: Array<IResourceItem>;\n}\n\nexport class ResourceManager {\n  private resources: Record<string, IResource> = {};\n\n  constructor(\n    private fireWrapper: IFirebaseWrapper,\n    private options: RAFirebaseOptions,\n    private flogger: IFirestoreLogger\n  ) {\n    this.fireWrapper.OnUserLogout(() => {\n      this.resources = {};\n    });\n  }\n\n  public async TryGetResource(\n    resourceName: string,\n    refresh?: 'REFRESH',\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    if (refresh) {\n      await this.RefreshResource(resourceName, collectionQuery);\n    }\n    return this.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n\n  public GetResource(relativePath: string): IResource {\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Can't find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async TryGetResourcePromise(\n    relativePath: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    log('resourceManager.TryGetResourcePromise', {\n      relativePath,\n      collectionQuery,\n    });\n    await this.initPath(relativePath);\n\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async RefreshResource(\n    relativePath: string,\n    collectionQuery: messageTypes.CollectionQueryType | undefined\n  ) {\n    if (this.options?.lazyLoading?.enabled) {\n      logWarn('resourceManager.RefreshResource', {\n        warn: 'RefreshResource is not available in lazy loading mode',\n      });\n      throw new Error(\n        'react-admin-firebase: RefreshResource is not available in lazy loading mode'\n      );\n    }\n\n    log('resourceManager.RefreshResource', { relativePath, collectionQuery });\n    await this.initPath(relativePath);\n    const resource = this.resources[relativePath];\n\n    const collection = resource.collection;\n    const query = this.applyQuery(collection, collectionQuery);\n    const newDocs = await query.get();\n\n    resource.list = newDocs.docs.map((doc) => parseFireStoreDocument<IResourceItem>(doc));\n    const count = newDocs.docs.length;\n    this.flogger.logDocument(count)();\n    log('resourceManager.RefreshResource', {\n      newDocs,\n      resource,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async GetSingleDoc(relativePath: string, docId: string) {\n    await this.initPath(relativePath);\n    const resource = this.GetResource(relativePath);\n    this.flogger.logDocument(1)();\n    const docSnap = await resource.collection.doc(docId).get();\n    if (!docSnap.exists) {\n      throw new Error('react-admin-firebase: No id found matching: ' + docId);\n    }\n    const result = parseFireStoreDocument(docSnap);\n    log('resourceManager.GetSingleDoc', {\n      relativePath,\n      resource,\n      docId,\n      docSnap,\n      result,\n    });\n    return result;\n  }\n\n  private async initPath(relativePath: string): Promise<void> {\n    const rootRef = this.options && this.options.rootRef;\n    const absolutePath = getAbsolutePath(rootRef, relativePath);\n    const hasBeenInited = !!this.resources[relativePath];\n    log('resourceManager.initPath()', {\n      absolutePath,\n      hasBeenInited,\n    });\n    if (hasBeenInited) {\n      log('resourceManager.initPath() has been initialized already...');\n      return;\n    }\n    const collection = this.fireWrapper.dbGetCollection(absolutePath);\n    const list: Array<IResourceItem> = [];\n    const resource: IResource = {\n      collection,\n      list,\n      path: relativePath,\n      pathAbsolute: absolutePath,\n    };\n    this.resources[relativePath] = resource;\n    log('resourceManager.initPath() setting resource...', {\n      resource,\n      allResources: this.resources,\n      collection: collection,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async getUserIdentifier(): Promise<string> {\n    const identifier = this.options.associateUsersById\n      ? await this.getCurrentUserId()\n      : await this.getCurrentUserEmail();\n    return identifier;\n  }\n\n  private async getCurrentUserEmail() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.email as string;\n    } else {\n      return 'annonymous user';\n    }\n  }\n  private async getCurrentUserId() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.uid;\n    } else {\n      return 'annonymous user';\n    }\n  }\n\n  private applyQuery(\n    collection: FireStoreCollectionRef,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): FireStoreCollectionRef {\n    const collRef = collectionQuery ? collectionQuery(collection) : collection;\n\n    log('resourceManager.applyQuery() ...', {\n      collection,\n      collectionQuery: (collectionQuery || '-').toString(),\n      collRef,\n    });\n    return collRef;\n  }\n}\n","import { set, get } from \"lodash\";\nimport { TASK_CANCELED, TASK_PAUSED, TASK_RUNNING } from \"../../misc/firebase-models\";\nimport {\n  AddCreatedByFields,\n  AddUpdatedByFields,\n  IFirestoreLogger,\n  joinPaths,\n  log,\n  logError,\n  dispatch,\n  translateDocToFirestore,\n} from \"../../misc\";\nimport { RAFirebaseOptions } from \"../options\";\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\nimport { IResource, ResourceManager } from \"./ResourceManager\";\n\nexport class FireClient {\n  public rm: ResourceManager;\n\n  constructor(\n    public fireWrapper: IFirebaseWrapper,\n    public options: RAFirebaseOptions,\n    public flogger: IFirestoreLogger\n  ) {\n    this.rm = new ResourceManager(this.fireWrapper, this.options, this.flogger);\n  }\n\n  public checkRemoveIdField(obj: any, docId: string) {\n    if (!this.options.dontAddIdFieldToDoc) {\n      obj.id = docId;\n    }\n  }\n\n  public transformToDb(resourceName: string, documentData: any, docId: string): any {\n    if (typeof this.options.transformToDb === 'function') {\n      return this.options.transformToDb(resourceName, documentData, docId);\n    }\n    return documentData;\n  }\n\n  public async parseDataAndUpload(r: IResource, id: string, data: any) {\n    if (!data) {\n      return data;\n    }\n    const docPath = r.collection.doc(id).path;\n\n    const result = translateDocToFirestore(data);\n    const uploads = result.uploads;\n    await Promise.all(\n      uploads.map(async (u) => {\n        const link = await this.uploadAndGetLink(\n          u.rawFile,\n          docPath,\n          u.fieldSlashesPath,\n          !!this.options.useFileNamesInStorage\n        );\n        set(data, u.fieldDotsPath + \".src\", link);\n      })\n    );\n    return data;\n  }\n\n  public async addCreatedByFields(obj: any) {\n    return AddCreatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  public async addUpdatedByFields(obj: any) {\n    return AddUpdatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  private async uploadAndGetLink(\n    rawFile: any,\n    docPath: string,\n    fieldPath: string,\n    useFileName: boolean\n  ): Promise<string | undefined> {\n    const storagePath = useFileName\n      ? joinPaths(docPath, fieldPath, rawFile.name)\n      : joinPaths(docPath, fieldPath);\n    return this.saveFile(storagePath, rawFile);\n  }\n\n  private async saveFile(\n    storagePath: string,\n    rawFile: any\n  ): Promise<string | undefined> {\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\n    try {\n      const { task, taskResult, downloadUrl } = this.fireWrapper.putFile(storagePath, rawFile);\n      const { name } = rawFile;\n      // monitor upload status & progress\n      dispatch('FILE_UPLOAD_WILL_START', name);\n      task.on('state_changed', (snapshot) => {\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        log('Upload is ' + progress + '% done');\n        dispatch('FILE_UPLOAD_PROGRESS', name, progress);\n        switch (snapshot.state) {\n          case TASK_PAUSED:\n            log('Upload is paused');\n            dispatch('FILE_UPLOAD_PAUSED', name);\n            break;\n          case TASK_RUNNING:\n            log('Upload is running');\n            dispatch('FILE_UPLOAD_RUNNING', name);\n            break;\n          case TASK_CANCELED:\n            log('Upload has been canceled');\n            dispatch('FILE_UPLOAD_CANCELED', name);\n            break;\n          // case storage.TaskState.ERROR:\n            // already handled by catch\n          // case storage.TaskState.SUCCESS:\n            // already handled by then\n        }\n      });\n      const [getDownloadURL] = await Promise.all([\n        downloadUrl,\n        taskResult,\n      ]);\n      dispatch('FILE_UPLOAD_COMPLETE', name);\n      dispatch('FILE_SAVED', name);\n      log(\"saveFile() saved file\", {\n        storagePath,\n        taskResult,\n        getDownloadURL,\n      });\n      return this.options.relativeFilePaths ? storagePath : getDownloadURL;\n    } catch (storageError) {\n      if (get(storageError, 'code') === \"storage/unknown\") {\n        logError(\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\n          { storageError }\n        );\n      } else {\n        logError(\"saveFile() error saving file\", {\n          storageError,\n        });\n      }\n    }\n  }\n}\n","import { RAFirebaseOptions } from \"index\";\nimport { IFirebaseWrapper, ResourceManager } from \"providers/database\";\n\nexport async function AddCreatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const createAtSelector = GetSelectorsCreateAt(options);\n  const createBySelector = GetSelectorsCreateBy(options);\n  obj[createAtSelector] = fireWrapper.serverTimestamp();\n  obj[createBySelector] = currentUserIdentifier;\n}\n\nexport async function AddUpdatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const updateAtSelector = GetSelectorsUpdateAt(options);\n  const updateBySelector = GetSelectorsUpdateBy(options);\n  obj[updateAtSelector] = fireWrapper.serverTimestamp();\n  obj[updateBySelector] = currentUserIdentifier;\n}\n\nexport function GetSelectorsUpdateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_at) {\n    return options.renameMetaFields.updated_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"lastupdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"lastUpdate\";\n  }\n  if (casing === \"snake\") {\n    return \"last_update\";\n  }\n  if (casing === \"pascal\") {\n    return \"LastUpdate\";\n  }\n  if (casing === \"kebab\") {\n    return \"last-update\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsUpdateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_by) {\n    return options.renameMetaFields.updated_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"updatedby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"updatedBy\";\n  }\n  if (casing === \"snake\") {\n    return \"updated_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"UpdatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"updated-by\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_at) {\n    return options.renameMetaFields.created_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createDate\";\n  }\n  if (casing === \"snake\") {\n    return \"create_date\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreateDate\";\n  }\n  if (casing === \"kebab\") {\n    return \"create-date\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_by) {\n    return options.renameMetaFields.created_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createdBy\";\n  }\n  if (casing === \"snake\") {\n    return \"created_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"created-by\";\n  }\n  return defautCase;\n}\n","import { FireStoreCollectionRef, FireStoreDocumentSnapshot, FireStoreQuery } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\n\nexport function setQueryCursor(\n  doc: FireStoreDocumentSnapshot,\n  params: messageTypes.IParamsGetList,\n  resourceName: string\n) {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  localStorage.setItem(key, doc.id);\n\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (!localCursorKeys) {\n    localStorage.setItem(allCursorsKey, JSON.stringify([key]));\n  } else {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    const newCursors = cursors.concat(key);\n    localStorage.setItem(allCursorsKey, JSON.stringify(newCursors));\n  }\n}\n\nexport async function getQueryCursor(\n  collection: FireStoreCollectionRef,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreDocumentSnapshot | false> {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  const docId = localStorage.getItem(key);\n  if (!docId) {\n    return false;\n  }\n\n  const doc = await collection.doc(docId).get();\n  flogger.logDocument(1)();\n  if (doc.exists) {\n    // incrementFirebaseReadsCounter(1);\n    return doc;\n  }\n  return false;\n}\n\nexport function clearQueryCursors(resourceName: string) {\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (localCursorKeys) {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    cursors.forEach((cursor) => localStorage.removeItem(cursor));\n    localStorage.removeItem(allCursorsKey);\n  }\n}\n\nexport async function findLastQueryCursor(\n  collection: FireStoreCollectionRef,\n  queryBase: FireStoreQuery,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n) {\n  const { page, perPage } = params.pagination;\n\n  let lastQueryCursor: FireStoreDocumentSnapshot | false = false;\n  let currentPage = page - 1;\n\n  const currentPageParams = {\n    ...params,\n    pagination: {\n      ...params.pagination,\n    },\n  };\n  while (!lastQueryCursor && currentPage > 1) {\n    currentPage--;\n    currentPageParams.pagination.page = currentPage;\n    console.log('getting query cursor currentPage=', currentPage);\n    lastQueryCursor = await getQueryCursor(\n      collection,\n      currentPageParams,\n      resourceName,\n      flogger\n    );\n  }\n  const limit = (page - currentPage) * perPage;\n  const isFirst = currentPage === 1;\n\n  function getQuery() {\n    if (isFirst) {\n      return queryBase.limit(limit);\n    } else {\n      return queryBase.startAt(lastQueryCursor).limit(limit);\n    }\n  }\n\n  const newQuery = getQuery();\n  const snapshots = await newQuery.get();\n  const docsLength = snapshots.docs.length;\n  flogger.logDocument(docsLength)();\n  const lastDocIndex = docsLength - 1;\n  const lastDocRef = snapshots.docs[lastDocIndex];\n  return lastDocRef;\n}\n","import { FireStoreCollectionRef, FireStoreQuery, FireStoreQueryOrder } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\nimport { findLastQueryCursor, getQueryCursor } from './queryCursors';\n\ninterface ParamsToQueryOptions {\n  filters?: boolean;\n  sort?: boolean;\n  pagination?: boolean;\n}\n\nconst defaultParamsToQueryOptions = {\n  filters: true,\n  sort: true,\n  pagination: true,\n};\n\nexport async function paramsToQuery<\n  TParams extends messageTypes.IParamsGetList\n>(\n  collection: FireStoreCollectionRef,\n  params: TParams,\n  resourceName: string,\n  flogger: IFirestoreLogger,\n  options: ParamsToQueryOptions = defaultParamsToQueryOptions\n): Promise<FireStoreQuery> {\n  const filtersStepQuery = options.filters\n    ? filtersToQuery(collection, params.filter)\n    : collection;\n\n  const sortStepQuery = options.sort\n    ? sortToQuery(filtersStepQuery, params.sort)\n    : filtersStepQuery;\n\n  return options.pagination\n    ? paginationToQuery(\n        sortStepQuery,\n        params,\n        collection,\n        resourceName,\n        flogger\n      )\n    : sortStepQuery;\n}\n\nexport function filtersToQuery(\n  query: FireStoreQuery,\n  filters: { [fieldName: string]: any }\n): FireStoreQuery {\n  const res = Object.entries(filters).reduce((acc,[fieldName, fieldValue]) => {\n    const opStr = fieldValue && Array.isArray(fieldValue) ? (fieldName.slice(-1) === 's' ? 'array-contains-any' : 'in') : '==';\n    return acc.where(fieldName, opStr, fieldValue);\n  }, query);\n  return res;\n}\n\nexport function sortToQuery(\n  query: FireStoreQuery,\n  sort: { field: string; order: string }\n): FireStoreQuery {\n  if (sort != null && sort.field !== 'id') {\n    const { field, order } = sort;\n    const parsedOrder = order.toLocaleLowerCase() as FireStoreQueryOrder;\n    return query.orderBy(field, parsedOrder);\n  }\n  return query;\n}\n\nasync function paginationToQuery<TParams extends messageTypes.IParamsGetList>(\n  query: FireStoreQuery,\n  params: TParams,\n  collection: FireStoreCollectionRef,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreQuery> {\n  const { page, perPage } = params.pagination;\n  if (page === 1) {\n    query = query.limit(perPage);\n  } else {\n    let queryCursor = await getQueryCursor(\n      collection,\n      params,\n      resourceName,\n      flogger\n    );\n    if (!queryCursor) {\n      queryCursor = await findLastQueryCursor(\n        collection,\n        query,\n        params,\n        resourceName,\n        flogger\n      );\n    }\n    query = query.startAfter(queryCursor).limit(perPage);\n  }\n\n  return query;\n}\n\nexport function getFullParamsForQuery<\n  TParams extends messageTypes.IParamsGetList\n>(reactAdminParams: TParams, softdeleteEnabled: boolean): TParams {\n  return {\n    ...reactAdminParams,\n    filter: softdeleteEnabled\n      ? {\n          deleted: false,\n          ...reactAdminParams.filter,\n        }\n      : reactAdminParams.filter,\n  };\n}\n\nexport function getNextPageParams<TParams extends messageTypes.IParamsGetList>(\n  params: TParams\n): TParams {\n  return {\n    ...params,\n    pagination: {\n      ...params.pagination,\n      page: params.pagination.page + 1,\n    },\n  };\n}\n","import {\n  log,\n  messageTypes,\n  parseFireStoreDocument,\n  recursivelyMapStorageUrls,\n} from '../../misc';\nimport { IResource, ResourceManager } from '../database/ResourceManager';\nimport { RAFirebaseOptions } from '../options';\nimport * as ra from '../../misc/react-admin-models';\nimport {\n  getFullParamsForQuery,\n  getNextPageParams,\n  paramsToQuery,\n} from './paramsToQuery';\nimport { clearQueryCursors, setQueryCursor } from './queryCursors';\nimport { FireClient } from 'providers/database';\nimport { FireStoreCollectionRef, FireStoreDocumentSnapshot } from 'misc/firebase-models';\n\nexport class FirebaseLazyLoadingClient {\n  constructor(\n    private readonly options: RAFirebaseOptions,\n    private readonly rm: ResourceManager,\n    private client: FireClient\n  ) {}\n\n  public async apiGetList<T extends ra.Record>(\n    resourceName: string,\n    reactAdminParams: ra.GetListParams\n  ): Promise<ra.GetListResult<T>> {\n    const r = await this.tryGetResource(resourceName);\n    const params = getFullParamsForQuery(\n      reactAdminParams,\n      !!this.options.softDelete\n    );\n\n    log('apiGetListLazy', { resourceName, params });\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n\n    const resultsCount = snapshots.docs.length;\n    if (!resultsCount) {\n      log('apiGetListLazy', {\n        message: 'There are not records for given query',\n      });\n      return { data: [], total: 0 };\n    }\n    this.client.flogger.logDocument(resultsCount)();\n\n    const data = snapshots.docs.map(doc => parseFireStoreDocument<T>(doc));\n    const nextPageCursor = snapshots.docs[snapshots.docs.length - 1];\n    // After fetching documents save queryCursor for next page\n    setQueryCursor(nextPageCursor, getNextPageParams(params), resourceName);\n    // Hardcoded to allow next pages, as we don't have total number of items\n    let total = 9000;\n\n    // Check for next pages\n    // If it's last page, we can count all items and disable going to next page\n    const isOnLastPage = await this.checkIfOnLastPage(\n      r.collection,\n      params,\n      resourceName,\n      nextPageCursor\n    );\n\n    if (isOnLastPage) {\n      const { page, perPage } = params.pagination;\n      total = (page - 1) * perPage + data.length;\n      log('apiGetListLazy', { message: \"It's last page of collection.\" });\n    }\n\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetListLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total,\n      };\n    }\n\n    log('apiGetListLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n\n    return { data, total };\n  }\n\n  public async apiGetManyReference(\n    resourceName: string,\n    reactAdminParams: messageTypes.IParamsGetManyReference\n  ): Promise<messageTypes.IResponseGetManyReference> {\n    const r = await this.tryGetResource(resourceName);\n    log('apiGetManyReferenceLazy', {\n      resourceName,\n      resource: r,\n      reactAdminParams,\n    });\n    const filterWithTarget = {\n      ...reactAdminParams.filter,\n      [reactAdminParams.target]: reactAdminParams.id,\n    };\n    const params = getFullParamsForQuery(\n      {\n        ...reactAdminParams,\n        filter: filterWithTarget,\n      },\n      !!this.options.softDelete\n    );\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n    const resultsCount = snapshots.docs.length;\n    this.client.flogger.logDocument(resultsCount)();\n    const data = snapshots.docs.map(d => parseFireStoreDocument(d));\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetManyReferenceLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total: data.length,\n      };\n    }\n\n    log('apiGetManyReferenceLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n    return { data, total: data.length };\n  }\n\n  private async checkIfOnLastPage<TParams extends messageTypes.IParamsGetList>(\n    collection: FireStoreCollectionRef,\n    params: TParams,\n    resourceName: string,\n    nextPageCursor: FireStoreDocumentSnapshot,\n  ): Promise<boolean> {\n    const query = await paramsToQuery(\n      collection,\n      params,\n      resourceName,\n      this.client.flogger,\n      {\n        filters: true,\n        sort: true,\n      }\n    );\n    if (!nextPageCursor) {\n      throw new Error('Page cursor was empty...');\n    }\n    const nextElementSnapshot = await query\n      .startAfter(nextPageCursor)\n      .limit(1)\n      .get();\n\n    if (!nextElementSnapshot.empty) {\n      // this.incrementFirebaseReadsCounter(1);\n    }\n\n    return nextElementSnapshot.empty;\n  }\n\n  public clearQueryCursors(resourceName: string) {\n    clearQueryCursors(resourceName);\n  }\n\n  private async tryGetResource(\n    resourceName: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n}\n","import {\n  getAbsolutePath,\n  log,\n  logger,\n  retrieveStatusCode,\n  logError,\n  MakeFirestoreLogger,\n} from \"../misc\";\nimport * as ra from \"../misc/react-admin-models\";\nimport { RAFirebaseOptions } from \"./options\";\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\nimport { FireApp } from \"../misc/firebase-models\";\nimport { FireClient } from \"./database/FireClient\";\nimport { GetList, GetMany, GetManyReference, GetOne } from \"./queries\";\nimport { Create, Delete, DeleteMany, Update, UpdateMany } from \"./commands\";\n\nexport interface IDataProvider extends ra.DataProvider {\n  app: FireApp;\n}\n\nexport function DataProvider(\n  firebaseConfig: {},\n  optionsInput?: RAFirebaseOptions\n): IDataProvider {\n  const options = optionsInput || {};\n  verifyDataProviderArgs(firebaseConfig, options);\n\n  const flogger = MakeFirestoreLogger(options);\n  logger.SetEnabled(!!options?.logging);\n  flogger.SetEnabled(!!options?.firestoreCostsLogger?.enabled);\n  flogger.ResetCount(!options?.firestoreCostsLogger?.persistCount);\n  log('Creating FirebaseDataProvider', {\n    firebaseConfig,\n    options\n  });\n\n  const fireWrapper = new FirebaseWrapper(optionsInput, firebaseConfig);\n\n  async function run<T>(cb: () => Promise<T>) {\n    let res: any;\n    try {\n      res = await cb();\n      return res;\n    } catch (error) {\n      const errorMsg = ((error as any) || '').toString();\n      const code = retrieveStatusCode(errorMsg);\n      const errorObj = { status: code, message: errorMsg, json: res };\n      logError(\"DataProvider:\", error, { errorMsg, code, errorObj });\n      throw errorObj;\n    }\n  }\n  const client = new FireClient(fireWrapper, options, flogger);\n\n  const newProviderApi: IDataProvider = {\n    app: fireWrapper.GetApp(),\n    getList<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetListParams\n    ): Promise<ra.GetListResult<RecordType>> {\n      return run(() => GetList<RecordType>(resource, params, client));\n    },\n    getOne<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetOneParams\n    ): Promise<ra.GetOneResult<RecordType>> {\n      return run(() => GetOne<RecordType>(resource, params, client));\n    },\n    getMany<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyParams\n    ): Promise<ra.GetManyResult<RecordType>> {\n      return run(() => GetMany<RecordType>(resource, params, client));\n    },\n    getManyReference<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyReferenceParams\n    ): Promise<ra.GetManyReferenceResult<RecordType>> {\n      return run(() =>\n        GetManyReference<RecordType>(resource, params, client)\n      );\n    },\n    update<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.UpdateParams\n    ): Promise<ra.UpdateResult<RecordType>> {\n      return run(() => Update<RecordType>(resource, params, client));\n    },\n    updateMany(\n      resource: string,\n      params: ra.UpdateManyParams\n    ): Promise<ra.UpdateManyResult> {\n      return run(() => UpdateMany(resource, params, client));\n    },\n    create<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.CreateParams\n    ): Promise<ra.CreateResult<RecordType>> {\n      return run(() => Create<RecordType>(resource, params, client));\n    },\n    delete<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.DeleteParams\n    ): Promise<ra.DeleteResult<RecordType>> {\n      return run(() => Delete(resource, params, client));\n    },\n    deleteMany(\n      resource: string,\n      params: ra.DeleteManyParams\n    ): Promise<ra.DeleteManyResult> {\n      return run(() => DeleteMany(resource, params, client));\n    },\n  };\n\n  return newProviderApi;\n}\n\nfunction verifyDataProviderArgs(\n  firebaseConfig: {},\n  options?: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n  if (options && options.rootRef) {\n    // Will throw error if rootRef doesn't point to a document\n    getAbsolutePath(options.rootRef, 'test');\n  }\n}\n","// From firebase SDK\n\nimport { logError } from \"./logger\";\n\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusTxt(status: number): 'ok' | 'unauthenticated' {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 401: // 'unauthenticated'\n    case 403: // 'permission-denied'\n      return 'unauthenticated';\n\n    case 0: // 'internal'\n    case 400: // 'invalid-argument'\n    case 404: // 'not-found'\n    case 409: // 'aborted'\n    case 429: // 'resource-exhausted'\n    case 499: // 'cancelled'\n    case 500: // 'internal'\n    case 501: // 'unimplemented'\n    case 503: // 'unavailable'\n    case 504: // 'deadline-exceeded'\n    default:\n      // ignore\n      return 'ok';\n  }\n}\n\n// From firebase SDK\n// tslint:disable-next-line:max-line-length\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusCode(statusTxt: string): number {\n  // Make sure any successful status is OK.\n  const regexResult = /\\[code\\=([\\w-]*)/g.exec(statusTxt);\n  const status = Array.isArray(regexResult) && regexResult[1];\n  if (!status) {\n    logError('unknown StatusCode ', {statusTxt});\n  }\n  switch (status) {\n    case 'unauthenticated':\n      return 401;\n    case 'permission-denied':\n      return 403;\n    case 'internal':\n      return 0;\n    case 'invalid-argument':\n      return 400;\n    case 'not-found':\n      return 404;\n    case 'aborted':\n      return 409;\n    case 'resource-exhausted':\n      return 429;\n    case 'cancelled':\n      return 499;\n    case 'internal':\n      return 500;\n    case 'unimplemented':\n      return 501;\n    case 'unavailable':\n      return 503;\n    case 'deadline-exceeded':\n      return 504;\n    default:\n      return 200;\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { FirebaseLazyLoadingClient } from '../lazy-loading/FirebaseLazyLoadingClient';\nimport {\n  filterArray,\n  log,\n  recursivelyMapStorageUrls,\n  sortArray,\n} from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetList<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetListParams,\n  client: FireClient\n): Promise<ra.GetListResult<T>> {\n  log('GetList', { resourceName, params });\n  const { rm, fireWrapper, options } = client;\n\n  if (options?.lazyLoading?.enabled) {\n    const lazyClient = new FirebaseLazyLoadingClient(\n      options,\n      rm,\n      client\n    );\n    return lazyClient.apiGetList<T>(resourceName, params);\n  }\n\n  const filterSafe = params.filter || {};\n\n  const collectionQuery = filterSafe.collectionQuery;\n  delete filterSafe.collectionQuery;\n\n  const r = await rm.TryGetResource(resourceName, 'REFRESH', collectionQuery);\n  const data = r.list;\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === 'ASC') {\n      sortArray(data, field, 'asc');\n    } else {\n      sortArray(data, field, 'desc');\n    }\n  }\n  let softDeleted = data;\n  if (options.softDelete && !Object.keys(filterSafe).includes('deleted')) {\n    softDeleted = data.filter((doc) => !doc.deleted);\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = filteredData.slice(pageStart, pageEnd) as T[];\n  const total = filteredData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      dataPage.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n      total,\n    };\n  }\n\n  return {\n    data: dataPage,\n    total,\n  };\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, translateDocFromFirestore } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetOne<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetOneParams,\n  client: FireClient\n): Promise<ra.GetOneResult<T>> {\n  log(\"GetOne\", { resourceName, params });\n  const { rm } = client;\n  try {\n    const id = params.id + '';\n    const dataSingle = await rm.GetSingleDoc(resourceName, id);\n    client.flogger.logDocument(1)();\n    return { data: dataSingle as T };\n  } catch (error) {\n    throw new Error(\n      'Error getting id: ' + params.id + ' from collection: ' + resourceName\n    );\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetMany<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyParams,\n  client: FireClient\n): Promise<ra.GetManyResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  const ids = params.ids;\n  log(\"GetMany\", { resourceName, resource: r, params, ids });\n  const matchDocSnaps = await Promise.all(\n    ids.map(idObj => {\n      if (typeof idObj === 'string') {\n        return r.collection.doc(idObj).get()\n      }\n      // Will get and resolve reference documents into the current doc\n      return r.collection.doc((idObj as any)['___refid']).get()\n    })\n  );\n  client.flogger.logDocument(ids.length)();\n  const matches = matchDocSnaps.map((snap) => {\n    return { ...snap.data(), id: snap.id } as T;\n  });\n  const permittedData = options.softDelete\n    ? matches.filter((row) => !row['deleted'])\n    : matches;\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n    };\n  }\n\n  return {\n    data: permittedData,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { filterArray, log, recursivelyMapStorageUrls, sortArray } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function GetManyReference<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyReferenceParams,\n  client: FireClient\n): Promise<ra.GetManyReferenceResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  log(\"GetManyReference\", { resourceName, params });\n  const filterSafe = params.filter || {};\n  const collectionQuery = filterSafe.collectionQuery;\n  const r = await rm.TryGetResource(\n    resourceName,\n    \"REFRESH\",\n    collectionQuery\n  );\n  delete filterSafe.collectionQuery;\n  log(\"apiGetManyReference\", { resourceName, resource: r, params });\n  const data = r.list;\n  const targetField = params.target;\n  const targetValue = params.id;\n  let softDeleted = data;\n  if (options.softDelete) {\n    softDeleted = data.filter(doc => !doc['deleted'])\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const targetIdFilter: Record<string, ra.Identifier> = {};\n  targetIdFilter[targetField] = targetValue;\n  const permittedData = filterArray(filteredData, targetIdFilter);\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === \"ASC\") {\n      sortArray(permittedData, field, \"asc\");\n    } else {\n      sortArray(permittedData, field, \"desc\");\n    }\n  }\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = permittedData.slice(pageStart, pageEnd) as T[];\n  const total = permittedData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) =>\n        recursivelyMapStorageUrls(fireWrapper, doc)\n      )\n    );\n    return { data, total };\n  }\n\n  return { data: dataPage, total };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Update<T extends ra.Record>(\n  resourceName: string,\n  params: ra.UpdateParams,\n  client: FireClient\n): Promise<ra.UpdateResult<T>> {\n  const { rm } = client;\n  log(\"Update\", { resourceName, params });\n  const id = params.id + \"\";\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Update\", { resourceName, resource: r, params });\n  const data = await client.parseDataAndUpload(r, id, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, id);\n  await client.addUpdatedByFields(docObj);\n  const docObjTransformed = client.transformToDb(resourceName, docObj, id);\n  await r.collection.doc(id).update(docObjTransformed);\n  return {\n    data: {\n      ...data,\n      id: id,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function UpdateMany(\n  resourceName: string,\n  params: ra.UpdateManyParams,\n  client: FireClient\n): Promise<ra.UpdateManyResult> {\n  const { rm } = client;\n  log(\"UpdateMany\", { resourceName, params });\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"UpdateMany\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async id => {\n      const idStr = id+'';\n      const data = await client.parseDataAndUpload(r, idStr, params.data);\n      const docObj = { ...data };\n      client.checkRemoveIdField(docObj, idStr);\n      await client.addUpdatedByFields(docObj);\n      const docObjTransformed = client.transformToDb(resourceName, docObj, idStr);\n      await r.collection\n        .doc(idStr)\n        .update(docObjTransformed);\n      return {\n        ...data,\n        id: idStr\n      };\n    })\n  );\n  return {\n    data: returnData\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Create<T extends ra.Record>(\n  resourceName: string,\n  params: ra.CreateParams,\n  client: FireClient\n): Promise<ra.CreateResult<T>> {\n  const { rm, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Create\", { resourceName, resource: r, params });\n  const hasOverridenDocId = params.data && params.data.id;\n  log(\"Create\", { hasOverridenDocId });\n  if (hasOverridenDocId) {\n    const overridenId = params.data.id;\n    const exists = (await r.collection.doc(overridenId).get()).exists;\n    if (exists) {\n      throw new Error(\n        `the id:\"${overridenId}\" already exists, please use a unique string if overriding the 'id' field`\n      );\n    }\n    const data = await client.parseDataAndUpload(r, overridenId, params.data);\n    if (!overridenId) {\n      throw new Error(\"id must be a valid string\");\n    }\n    const docObj = { ...data };\n    client.checkRemoveIdField(docObj, overridenId);\n    await client.addCreatedByFields(docObj);\n    await client.addUpdatedByFields(docObj);\n    const docObjTransformed = client.transformToDb(resourceName, docObj, overridenId);\n    log(\"Create\", { docObj });\n    await r.collection.doc(overridenId).set(docObjTransformed, { merge: false });\n    return {\n      data: {\n        ...docObjTransformed,\n        id: overridenId,\n      },\n    };\n  }\n  const newId = fireWrapper.dbMakeNewId();\n  const data = await client.parseDataAndUpload(r, newId, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, newId);\n  await client.addCreatedByFields(docObj);\n  await client.addUpdatedByFields(docObj);\n  const docObjTransformed = client.transformToDb(resourceName, docObj, newId);\n  await r.collection.doc(newId).set(docObjTransformed, { merge: false });\n  return {\n    data: {\n      ...docObjTransformed,\n      id: newId,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteSoft } from \"./Delete.Soft\";\n\nexport async function Delete<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm, options } = client;\n  if (options.softDelete) {\n    return DeleteSoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"apiDelete\", { resourceName, resource: r, params });\n  try {\n    const id = params.id + \"\";\n    await r.collection.doc(id).delete();\n  } catch (error) {\n    throw new Error(error as any);\n  }\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteSoft<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm } = client;\n  const id = params.id + \"\";\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteSoft\", { resourceName, resource: r, params });\n  const docObj = { deleted: true };\n  await client.addUpdatedByFields(docObj);\n  r.collection\n    .doc(id)\n    .update(docObj)\n    .catch((error) => {\n      logError(\"DeleteSoft error\", { error });\n    });\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteManySoft } from \"./DeleteMany.Soft\";\n\nexport async function DeleteMany(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { options, rm, fireWrapper } = client;\n  if (options.softDelete) {\n    return DeleteManySoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteMany\", { resourceName, resource: r, params });\n  const returnData: ra.Identifier[] = [];\n  const batch = fireWrapper.dbCreateBatch();\n  for (const id of params.ids) {\n    const idStr = id + '';\n    const docToDelete = r.collection.doc(idStr);\n    batch.delete(docToDelete);\n    returnData.push(id);\n  }\n  try {\n    await batch.commit();\n  } catch (error) {\n    throw new Error(error as any)\n  }\n  return { data: returnData };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteManySoft(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { rm } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteManySoft\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async (id) => {\n      const idStr = id + \"\";\n      const docObj = { deleted: true };\n      await client.addUpdatedByFields(docObj);\n      r.collection\n        .doc(idStr)\n        .update(docObj)\n        .catch((error) => {\n          logError(\"apiSoftDeleteMany error\", { error });\n        });\n      return idStr;\n    })\n  );\n  return {\n    data: returnData,\n  };\n}\n","import { messageTypes } from './../misc/messageTypes';\nimport { log, retrieveStatusTxt, logWarn, logger } from '../misc';\nimport { RAFirebaseOptions } from './options';\nimport { FirebaseWrapper } from './database/firebase/FirebaseWrapper';\nimport {\n  AuthProvider as RaAuthProvider,\n  UserIdentity,\n} from '../misc/react-admin-models';\nimport { IFirebaseWrapper } from './database';\nimport { FireUser } from '../misc/firebase-models';\n\nclass AuthClient {\n  private fireWrapper: IFirebaseWrapper;\n\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\n    const options = optionsInput || {};\n    log('Auth Client: initializing...', { firebaseConfig, options });\n    this.fireWrapper = new FirebaseWrapper(options, firebaseConfig);\n    options.persistence && this.setPersistence(options.persistence);\n  }\n\n  setPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    return this.fireWrapper.authSetPersistence(persistenceInput);\n  }\n\n  public async HandleAuthLogin(params: { username: string; password: string }) {\n    const { username, password } = params;\n\n    if (username && password) {\n      try {\n        const user = await this.fireWrapper.authSigninEmailPassword(\n          username,\n          password\n        );\n        log('HandleAuthLogin: user sucessfully logged in', { user });\n        return user;\n      } catch (e) {\n        log('HandleAuthLogin: invalid credentials', { params });\n        throw new Error('Login error: invalid credentials');\n      }\n    } else {\n      return this.getUserLogin();\n    }\n  }\n\n  public HandleAuthLogout() {\n    return this.fireWrapper.authSignOut();\n  }\n\n  public HandleAuthError(errorHttp: messageTypes.HttpErrorType) {\n    log('HandleAuthLogin: invalid credentials', { errorHttp });\n    const status = !!errorHttp && errorHttp.status;\n    const statusTxt = retrieveStatusTxt(status);\n    if (statusTxt === 'ok') {\n      log('API is actually authenticated');\n      return Promise.resolve();\n    }\n    logWarn('Recieved authentication error from API');\n    return Promise.reject();\n  }\n\n  public async HandleAuthCheck(): Promise<any> {\n    return this.getUserLogin();\n  }\n\n  public getUserLogin(): Promise<FireUser> {\n    return this.fireWrapper.authGetUserLoggedIn();\n  }\n\n  public async HandleGetPermissions() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.claims;\n    } catch (e) {\n      log('HandleGetPermission: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetIdentity(): Promise<UserIdentity> {\n    try {\n      const { uid, displayName, photoURL } = await this.getUserLogin();\n      const identity: UserIdentity = {\n        id: uid,\n        fullName: `${displayName ?? ''}`,\n        avatar: `${photoURL ?? ''}`,\n      };\n      return identity;\n    } catch (e) {\n      log('HandleGetIdentity: no user is logged in', {\n        e,\n      });\n      return null as any;\n    }\n  }\n\n  public async HandleGetJWTAuthTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.authTime;\n    } catch (e) {\n      log('HandleGetJWTAuthTime: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetJWTExpirationTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.expirationTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTExpirationTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTSignInProvider() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.signInProvider;\n    } catch (e) {\n      log(\n        'HandleGetJWTSignInProvider: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTIssuedAtTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.issuedAtTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTToken() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.token;\n    } catch (e) {\n      log(\n        'HandleGetJWTToken: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n}\n\nexport function AuthProvider(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): ReactAdminFirebaseAuthProvider {\n  VerifyAuthProviderArgs(firebaseConfig, options);\n  logger.SetEnabled(!!options?.logging);\n  const auth = new AuthClient(firebaseConfig, options);\n\n  const provider: ReactAdminFirebaseAuthProvider = {\n    // React Admin Interface\n    login: (params) => auth.HandleAuthLogin(params),\n    logout: () => auth.HandleAuthLogout(),\n    checkAuth: () => auth.HandleAuthCheck(),\n    checkError: (error) => auth.HandleAuthError(error),\n    getPermissions: () => auth.HandleGetPermissions(),\n    getIdentity: () => auth.HandleGetIdentity(),\n    // Custom Functions\n    getAuthUser: () => auth.getUserLogin(),\n    getJWTAuthTime: () => auth.HandleGetJWTAuthTime(),\n    getJWTExpirationTime: () => auth.HandleGetJWTExpirationTime(),\n    getJWTSignInProvider: () => auth.HandleGetJWTSignInProvider(),\n    getJWTClaims: () => auth.HandleGetPermissions(),\n    getJWTToken: () => auth.HandleGetJWTToken(),\n  };\n  return provider;\n}\n\nexport type ReactAdminFirebaseAuthProvider = RaAuthProvider & {\n  // Custom Functions\n  getAuthUser: () => Promise<FireUser>,\n  getJWTAuthTime: () => Promise<string | null>,\n  getJWTExpirationTime: () => Promise<string | null>,\n  getJWTSignInProvider: () => Promise<string | null>,\n  getJWTClaims: () => Promise<{ [key: string]: any; } | null>,\n  getJWTToken: () => Promise<string | null>,  \n}\n\nfunction VerifyAuthProviderArgs(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n}\n"],"names":["data","field","dir","sort","a","b","get","rawB","isAsc","Number","isFinite","rawA","basicSort","toLowerCase","Date","aValue","bValue","filterArray","searchFields","isEmpty","searchObjs","Object","keys","map","fieldName","getSubObjects","value","searchField","searchValue","tree","leaves","obj","path","key","hasOwnProperty","objVal","Array","recursivelyWalk","currentPath","push","getFieldReferences","filter","row","reduce","acc","cur","res","searchThis","toString","includes","isArray","doesRowMatch","LogNoOp","args","constructor","title","cacheEnabledKey","this","isEnabled","localStorage","getItem","SetEnabled","setItem","removeItem","log","console","bind","warn","error","logger","LoggerBase","logError","dispatch","eventName","fileName","eventMonitor","document","getElementById","CustomEvent","detail","dispatchEvent","event","translateDocFromFirestore","result","parsedDoc","refdocs","recusivelyCheckObjectValue","input","fieldPath","toDate","index","isInputADocReference","ref","refDocPath","id","firestore","parent","recursivelyMapStorageUrls","async","fireWrapper","fieldValue","has","src","storage","getDownloadURL","_extends","Promise","all","parseFireStoreDocument","doc","logWarn","applyRefDocs","refDocs","d","set","dataWithRefs","rootRef","relativePath","Error","rootRefValue","join","withSlashes","split","length","slice","joinPaths","translateDocToFirestore","uploads","recusivelyParseObjectValue","fieldDotsPath","refPath","fieldSlashesPath","rawFile","FirebaseWrapper","inputOptions","firebaseConfig","app","options","optionsSafe","window","_firebase$apps","firebase","apps","initializeApp","ObtainFirebaseApp","dbGetCollection","absolutePath","collection","dbCreateBatch","batch","dbMakeNewId","OnUserLogout","callBack","auth","onAuthStateChanged","user","isLoggedOut","putFile","storagePath","task","put","taskResult","rej","then","catch","downloadUrl","t","url","fieldSrc","serverTimestamp","FieldValue","persistenceInput","persistenceResolved","Auth","Persistence","LOCAL","NONE","SESSION","setPersistence","email","password","signInWithEmailAndPassword","signOut","resolve","reject","currentUser","unsubscribe","authGetUserLoggedIn","GetApp","db","TASK_PAUSED","TaskState","PAUSED","TASK_RUNNING","RUNNING","TASK_CANCELED","CANCELED","ResourceManager","flogger","resources","resourceName","refresh","collectionQuery","RefreshResource","TryGetResourcePromise","GetResource","resource","initPath","_this$options","_this$options$lazyLoa","lazyLoading","enabled","query","applyQuery","newDocs","list","docs","logDocument","collectionPath","docId","docSnap","exists","getAbsolutePath","hasBeenInited","pathAbsolute","allResources","associateUsersById","getCurrentUserId","getCurrentUserEmail","uid","collRef","FireClient","rm","checkRemoveIdField","dontAddIdFieldToDoc","transformToDb","documentData","r","_this","docPath","u","link","uploadAndGetLink","useFileNamesInStorage","disableMeta","currentUserIdentifier","getUserIdentifier","createAtSelector","renameMetaFields","created_at","casing","metaFieldCasing","defautCase","GetSelectorsCreateAt","createBySelector","created_by","GetSelectorsCreateBy","AddCreatedByFields","updateAtSelector","GetSelectorsUpdateAt","updated_at","updateBySelector","updated_by","GetSelectorsUpdateBy","AddUpdatedByFields","useFileName","name","saveFile","on","snapshot","progress","bytesTransferred","totalBytes","state","relativeFilePaths","storageError","getQueryCursor","params","btoa","JSON","stringify","defaultParamsToQueryOptions","filters","pagination","paramsToQuery","entries","opStr","where","filtersToQuery","sortStepQuery","order","toLocaleLowerCase","orderBy","parsedOrder","sortToQuery","filtersStepQuery","page","perPage","limit","queryCursor","findLastQueryCursor","queryBase","lastQueryCursor","currentPage","currentPageParams","startAt","snapshots","newQuery","docsLength","startAfter","paginationToQuery","getFullParamsForQuery","reactAdminParams","softdeleteEnabled","deleted","FirebaseLazyLoadingClient","client","tryGetResource","softDelete","resultsCount","message","total","allCursorsKey","localCursorKeys","parse","concat","newCursors","setQueryCursor","nextPageCursor","getNextPageParams","checkIfOnLastPage","parsedData","_this2","filterWithTarget","target","empty","clearQueryCursors","forEach","cursor","DataProvider","optionsInput","_options$firestoreCos","_options$firestoreCos2","verifyDataProviderArgs","ResetCount","shouldReset","KEY_SINGLE","docCount","_options$lazyLoading","count","incrementBy","currentCountRaw","incremented","parseInt","incrementRead","MakeFirestoreLogger","logging","firestoreCostsLogger","persistCount","run","cb","errorMsg","code","retrieveStatusCode","statusTxt","regexResult","exec","status","errorObj","json","newProviderApi","getList","apiGetList","filterSafe","TryGetResource","sortArray","softDeleted","filteredData","pageStart","dataPage","GetList","getOne","dataSingle","GetSingleDoc","GetOne","getMany","GetMany","ids","matchDocSnaps","idObj","matches","snap","permittedData","getManyReference","targetField","targetValue","targetIdFilter","GetManyReference","update","Update","parseDataAndUpload","docObj","addUpdatedByFields","docObjTransformed","updateMany","idStr","UpdateMany","create","hasOverridenDocId","overridenId","addCreatedByFields","_docObjTransformed","merge","newId","Create","delete","Delete","previousData","DeleteSoft","deleteMany","DeleteMany","DeleteManySoft","returnData","docToDelete","commit","persistence","authSetPersistence","username","getUserLogin","authSigninEmailPassword","e","HandleAuthLogout","authSignOut","HandleAuthError","errorHttp","retrieveStatusTxt","getIdTokenResult","claims","displayName","photoURL","fullName","avatar","authTime","expirationTime","signInProvider","issuedAtTime","token","AuthProvider","VerifyAuthProviderArgs","login","HandleAuthLogin","logout","checkAuth","HandleAuthCheck","checkError","getPermissions","HandleGetPermissions","getIdentity","HandleGetIdentity","getAuthUser","getJWTAuthTime","HandleGetJWTAuthTime","getJWTExpirationTime","HandleGetJWTExpirationTime","getJWTSignInProvider","HandleGetJWTSignInProvider","getJWTClaims","getJWTToken","HandleGetJWTToken"],"mappings":"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"}